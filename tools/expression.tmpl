// Package ast implements the Abstarct-Syntax-Tree interface of the Lox language.
package ast

{{/* this generated output is processed through "gofmt" */}}

import (
  "github.com/pravj/glox/scanner/token"
)

{{/* name of the visitor interface */}}
{{$visitorName := "Visitor"}}

{{/* name of the top-level expression structure */}}
{{$baseClassName := "Expression"}}

// interface to facilitate "visitor pattern"
type {{$visitorName}} interface {
  {{- range .TypeAnnotations}}
    {{$name := . | typeClassName}}

    visit{{$name}}{{$baseClassName}}(expr {{$name}}) interface{}
  {{end -}}
}

// base interface for expressions
type {{$baseClassName}} interface {
  Accept(v {{$visitorName}}) interface{}
}

{{- range .TypeAnnotations}}
  {{$fieldString := . | typeClassFieldString}}
  {{$fields := . | typeClassFields}}
  {{$name := . | typeClassName}}

  type {{$name}} struct {
    {{- range $fields}}
      {{. | trimString | capitolCaseString}}
    {{end}}
  }

  {{$constructor := $fields | typeClassFieldArgs}}
  func New{{$name}}{{$baseClassName}}({{$fieldString}}) *{{$name}} {
    return &{{$name}}{{$constructor}}
  }

  func (expr *{{$name}}) Accept(v {{$visitorName}}) interface{} {
    return v.visit{{$name}}{{$baseClassName}}(*expr)
  }
{{end -}}
